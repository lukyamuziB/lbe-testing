version: 2
jobs:
  test:
    working_directory: /tmp/lenken
    docker:
      - image: circleci/php:7.1-browsers
        environment:
          CC_TEST_REPORTER_ID: $CC_TEST_REPORTER_ID
          APP_ENV: testing
          POSTGRES_HOST: "127.0.0.1"
          CIRCLE_PROJECT_USERNAME: andela
          CIRCLE_PROJECT_REPONAME: lenken-server
          TEST_DATABASE_URL: postgresql://ubuntu@localhost/circle_test?sslmode=disable
          IMG_TAG: $(echo $CIRCLE_SHA1 | cut -c -7)
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: ""
      - image: redis
    steps:
      - run:
          name: Install PHP extensions
          command: |
              sudo apt-get install -y libpq-dev
              sudo docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql
              sudo docker-php-ext-install pdo pdo_pgsql pgsql
      - run:
          name: Install Composer
          command: curl -sS https://getcomposer.org/installer | sudo php  -- --install-dir=/usr/local/bin --filename=composer
      - checkout
      - restore_cache:
          keys:
            - composer-cache-{{ checksum "composer.json" }}
            - composer-cache-
      - run:
          name: Composer Install Dependencies
          command: composer install --prefer-dist --no-interaction
      - save_cache:
          key: composer-cache-{{ checksum "composer.json" }}
          paths:
            - vendor
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Composer Test
          command: |
            ./cc-test-reporter before-build
            composer test
      - run:
          name: Test Coverage Reporter
          command: ./cc-test-reporter after-build --coverage-input-type clover --exit-code $?
  deploy_to_staging:
    working_directory: /tmp/lenken
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Add GCloud Key to JSON file
          command: |
              echo $GCLOUD_SERVICE_KEY_TESTING > ${HOME}/auth_lenken_app.json
      - run:
          name: Deploy to Staging GCP VMs
          command: .circleci/deploy_lenken.sh
  deploy_to_production:
    working_directory: /tmp/lenken
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Add GCloud key to JSON file
          command: |
              echo $GCLOUD_SERVICE_KEY_TESTING > ${HOME}/auth_lenken_app.json
      - run:
          name: Deploy to Production GCP VMs
          command: .circleci/deploy_lenken_production.sh
  slack_notification:
    working_directory: /tmp/lenken
    docker:
        - image: circleci/node:latest
    steps:
        - checkout
        - run:
            name: Slack notification
            command: .circleci/slack_integration.sh
  slack_ack_staging:
    working_directory: /tmp/lenken
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: set environment
          command: export deploy_env='Staging'
      - run:
          name: slack notification
          command: |
              export deploy_env="Staging"
              export commit=$(echo $CIRCLE_SHA1 | cut -c -7)
              .circleci/slack_notify.sh
  slack_ack_production:
    working_directory: /tmp/lenken
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: slack notification
          command: |
              export deploy_env="Production"
              export commit=$(echo $CIRCLE_SHA1 | cut -c -7)
              echo $commit
              .circleci/slack_notify.sh
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - test
      - deploy_to_staging:
          requires:
            - test
          filters:
            branches:
              only: develop
      - slack_ack_staging:
          requires:
            - deploy_to_staging
          filters:
            branches:
              only: develop
      - slack_notification:
          filters:
            branches:
                only: production
      - confirm_deployment:
          type: approval
          requires:
            - slack_notification
      - deploy_to_production:
          requires:
            - confirm_deployment
          filters:
            branches:
              only: production
      - slack_ack_production:
          requires:
            - deploy_to_production
          filters:
            branches:
              only: production
